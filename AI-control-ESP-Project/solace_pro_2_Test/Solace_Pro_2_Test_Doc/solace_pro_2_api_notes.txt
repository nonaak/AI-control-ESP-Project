Lovense Solace Pro (aka “Solace Pro 2”) — Bluetooth / API Control Notes
Generated: 2025-09-16 19:49 (Europe/Amsterdam)

SUMMARY
- Device: Lovense Solace Pro (automatic thrusting stroker). Often marketed simply as “Solace Pro”; some stores/blogs call it “Solace Pro 2”.
- Transport options for control from your own apps:
  1) LAN/HTTP via Lovense Remote app (“Standard API”): Easiest, officially documented.
  2) Cloud/Server API (via Lovense): For remote control over the internet.
  3) “Game Mode” (LAN): Same local HTTP API, user reveals local IP in-app.
  4) Intiface/Buttplug stack over BLE: Community framework with device profile (linear position + speed). No public low‑level BLE spec.
  5) Lovense USB Bluetooth Dongle (HID/UART bridge): Alternative adapter path for PC control through Lovense ecosystem.
- Direct BLE protocol: NOT publicly documented by Lovense. Use (1/3) official LAN API, or (4) Buttplug/Intiface if you need native BLE.

OFFICIAL DOCS & MANUAL (KEY SOURCES)
- Lovense “Standard API” (LAN/HTTP + Server): https://developer.lovense.com/docs/standard-solutions/standard-api
  • Includes Solace Pro–specific Position and PatternV2 endpoints.
- Getting started / pairing guide: https://www.lovense.com/guide/solace-pro
- User manual (PDF): https://cdn.lovense.com/UploadFiles/web/productpage/solacePro/SolacePro_User_Manual.pdf
- Lovense brand background (context): https://en.wikipedia.org/wiki/Lovense
- Intiface/Buttplug Lovense notes: https://docs.intiface.com/docs/intiface-central/brands/lovense/

DEVICE FACTS
- Brand / company: Lovense (HYTTO PTE. LTD.).
- Modes on device: thrust start/stop, 8 stroke speed levels, 4 thrust depth levels, pattern button (4 presets). See manual.
- Pairing: Hold power 3s; pair in Lovense Remote (phone/PC via Lovense USB BT Adapter), or connect via Intiface/Buttplug.
- Not waterproof (main body). Sleeve/stroker removable and washable. See manual.

=== PATH A: STANDARD LAN API (RECOMMENDED) ===
Overview
- Your app talks HTTP(S) to a local webserver inside Lovense Remote (Android/iOS/PC) on the same LAN.
- User must enable “Game Mode” in the app and provide the local IP/port, or you discover via the Server API bootstrap.
- All requests are JSON POST to https://{domain}:{httpsPort}/command with Content-Type: application/json.
- For remote access across the internet, use the “By server” endpoints (see bottom).

A1) FUNCTION REQUEST  (general functions, including thrust + stroke range)
URL: https://{domain}:{httpsPort}/command
JSON body:
{
  "command": "Function",
  "action": "Stroke:MIN-MAX,Thrusting:LEVEL",  // e.g. "Stroke:0-20,Thrusting:10"
  "timeSec": 20,                               // 0 = indefinite; else > 1
  "loopRunningSec": 9,                         // optional, >1
  "loopPauseSec": 4,                           // optional, >1
  "toy": "TOY_ID",                             // optional; omit to target all
  "stopPrevious": 1,                           // optional; default 1
  "apiVer": 1
}
Ranges (per docs):
- Vibrate/Rotate/Fingering/Suction/Thrusting: 0..20
- Pump: 0..3, Depth: 0..3
- Stroke (range for Solace Pro): 0..100 (MIN..MAX); keep MIN and MAX at least 20 apart.

A2) SOLACE PRO — POSITION REQUEST (real‑time linear position)
Purpose: Move the stroker to a position 0..100 (0 = one end, 100 = the other).
URL: https://{domain}:{httpsPort}/command
JSON body:
{
  "command": "Position",
  "value": "38",     // "0".."100" as string
  "toy": "TOY_ID",   // optional
  "apiVer": 1
}
Notes (from docs):
- Stroker continues ~300 ms after executing a position command.
- Reaching target speed from rest takes ~1–2 s; high‑rate updates yield smoother motion.

A3) PATTERN REQUEST (strength‑based, intervalled)
URL: https://{domain}:{httpsPort}/command
Headers: X-platform: YourAppName
JSON body (example vibrate pattern):
{
  "command": "Pattern",
  "rule": "V:1;F:v;S:1000#",
  "strength": "20;20;5;20;10",
  "timeSec": 9,
  "toy": "TOY_ID",
  "apiVer": 2
}
Notes:
- F options: v (vibrate), r (rotate), p (pump), t (thrusting), f (fingering), s (suction), d (depth), o (oscillate).
- Interval S in ms; up to 50 entries in strength.

A4) PATTERN V2 (TIMED POSITION SCRIPT for Solace Pro)
- Best for pre‑defined position scripts (like funscript‑style), then Play/Stop.
Setup:
{
  "command": "PatternV2",
  "type": "Setup",
  "actions": [ { "ts":0,"pos":10 }, { "ts":100,"pos":100 }, { "ts":200,"pos":10 } ],
  "apiVer": 1
}
Play:
{
  "command": "PatternV2",
  "type": "Play",
  "toy": "TOY_ID",
  "startTime": 0,          // optional, ms
  "offsetTime": 0,         // optional, ms (see SyncTime)
  "apiVer": 1
}
Stop:
{
  "command": "PatternV2",
  "type": "Stop",
  "toy": "TOY_ID",
  "apiVer": 1
}
SyncTime (to measure latency):
{
  "command": "PatternV2",
  "type": "SyncTime",
  "apiVer": 1
}

A5) GAME MODE (LAN)
- In Lovense Remote: Discover → Game Mode → Enable LAN (user gets local IP).
- Your app and Lovense Remote must be on same LAN (Wi‑Fi). Then use the same endpoints as above.

A6) TOY DISCOVERY & TOY ID
- Standard API flows provide discovery & a toyId when pairing via the Lovense app. See developer docs for bootstrap flow (“By server” or Game Mode screens).

=== PATH B: SERVER (CLOUD) API ===
When LAN is not possible:
POST https://api.lovense-api.com/api/lan/v2/command
Example body mirrors Function/Pattern above (action ranges identical). Requires pairing via code or QR per docs.

=== PATH C: INTIFACE/BUTTPLUG (BLE) ===
- If you prefer to avoid running Lovense Remote, you can use the Buttplug (Intiface Central) stack.
- Solace Pro has a profile with linear position and speed; newer Intiface versions list “Lovense Solace Pro — Linear/Funscript Support”. You’ll see both speed and position capabilities once connected.
- Caveats: Some Intiface versions had discover/connect issues; ensure you’re on a recent Intiface Central, forget/re‑scan the device if needed.
References:
- Release/update thread noting Solace Pro linear/funscript support: https://discuss.eroscripts.com/t/intiface-central-v2-6-4-out-w-lovense-solace-pro-linear-funscript-support/202008
- Troubleshooting/connection reports: https://discuss.buttplug.io/t/intiface-scan-doesnt-pick-up-lovesense-solace/502 and https://discuss.buttplug.io/t/solace-pro-found-but-not-connected-to-intiface-mobile-app-2-6-5/548
- Observation from buttplug issue: “Solace Pro implements basically The Handy’s Wi‑Fi API semantics, over Bluetooth” (informal dev note): https://github.com/buttplugio/buttplug/issues/606

=== LOVENSE USB BLUETOOTH DONGLE ===
- Lovense Dongle (nRF52840) acts as BLE↔UART/HID bridge depending on revision (black PCB = UART, white PCB = HID). Useful for PC setups that need a stable adapter in Lovense ecosystem.
Ref: https://docs.intiface.com/docs/intiface-central/brands/lovense/

=== IMPLEMENTATION SKETCHES ===
(1) Real‑time slider → POSITION requests @ ~50–100 ms step:
- Maintain a moving target 0..100 from UI/algorithm.
- Send Position JSON POSTs to local Lovense Remote webserver as the target changes (debounce to ~10–20 Hz for smoothness without flooding).

(2) Funscript playback via PatternV2:
- Convert funscript actions to array of { ts: <ms>, pos: <0..100> }.
- Setup once (PatternV2 Setup), then Play with optional offsetTime from SyncTime.

(3) Range‑based thrust:
- Use Function with “Stroke:MIN-MAX,Thrusting:LEVEL” for a simpler speed+range control loop when you don’t need exact positions.

=== PRACTICAL NOTES ===
- Rate limiting: Position commands are executed continuously; device coasts ~300 ms post‑command—plan for this in your control loop.
- Startup dynamics: Expect 1–2 s to reach requested speed from rest.
- Stroke range rule: Keep MIN and MAX at least 20 apart; else Stroke range is ignored by the app.
- Targeting toys: Omit “toy” to apply to all connected toys, or specify “toy” with the toy ID.
- Security/Privacy: Local server runs inside Lovense Remote; only target the user’s local IP/port. For internet control, use the official Server API workflow.

=== BASIC CURL EXAMPLES (LAN) ===

# Position to 60
curl -X POST "https://{domain}:{httpsPort}/command" \
  -H "Content-Type: application/json" \
  -d '{"command":"Position","value":"60","apiVer":1}'

# Thrusting 10 with stroke range 10–70 for 30s
curl -X POST "https://{domain}:{httpsPort}/command" \
  -H "Content-Type: application/json" \
  -d '{"command":"Function","action":"Stroke:10-70,Thrusting:10","timeSec":30,"apiVer":1}'

# PatternV2 setup + play
curl -X POST "https://{domain}:{httpsPort}/command" -H "Content-Type: application/json" -d '{"command":"PatternV2","type":"Setup","actions":[{"ts":0,"pos":10},{"ts":100,"pos":100},{"ts":200,"pos":10}],"apiVer":1}'
curl -X POST "https://{domain}:{httpsPort}/command" -H "Content-Type: application/json" -d '{"command":"PatternV2","type":"Play","apiVer":1}'

=== TROUBLESHOOTING ===
- Can’t see device in Intiface? Stop server, “Forget Device”, restart, then rescan. Ensure Solace Pro isn’t listed under “Disconnected”. (See eroscripts thread above.)
- If LAN control fails: Confirm Game Mode enabled, correct IP/port, same LAN, and that your HTTP client trusts the app’s local TLS cert (some SDKs require allowing self‑signed).
- If Stroke range ignored: Ensure MIN and MAX differ by ≥ 20 per docs.

=== APP/STORE PAGES (FYI) ===
- Product page(s): https://www.lovense.com/solace-automatic-hands-free-male-masturbator
- Solace Pro + Mission 2 bundle page: https://www.lovense.com/ldr-sex-toys-for-couples-solace-pro-and-mission-2
- Example retail listing: https://www.amazon.com/dp/B0D2VYQYTS

END OF FILE
