KIIROO KEON – CONTROL DEEP DIVE (BLE + BUTTPLUG/INTIFACE)
Last updated: 2025-09-16 19:57 UTC

Overview
========
The Kiiroo Keon does not have an official public BLE API. Community knowledge shows it follows the Kiiroo v2 (Fleshlight Launch/Onyx family) protocol. You can control it either:

1) Direct BLE (GATT): Write 2-byte movement packets [YY, ZZ] → position/speed (0–99 each) to the device data characteristic, after initializing out of bootloader/app mode.
2) Through Buttplug/Intiface: A higher-level, stable API that abstracts BLE services and maps Keon to a linear actuator (positional). Recommended for most applications.

Direct BLE (GATT)
=================
Closest documented relatives and UUIDs
--------------------------------------
• Fleshlight Launch (Kiiroo v2 family)
  - Service UUID:             88f80580-0000-01e6-aace-0002a5d5c51b
  - Write/Data Characteristic:88f80581-0000-01e6-aace-0002a5d5c51b
  - Status Notify Char:       88f80582-0000-01e6-aace-0002a5d5c51b
  - Command/Bootloader Char:  88f80583-0000-01e6-aace-0002a5d5c51b
  - Packet (FW 1.2/1.3+):     0xYY 0xZZ   (YY=position 0..99, ZZ=speed 0..99; decimal)
  - Older FW used BCD; newer FW uses decimal 0–99.

• Kiiroo Onyx/Pearl 1 (different family with Nordic UART-like UUIDs, useful for scanners)
  - Service UUID:             49535343-fe7d-4ae5-8fa9-9fafd205e455
  - RX Characteristic UUID:   49535343-1e4d-4bd9-ba61-23c647249616   (Write)
  - TX Characteristic UUID:   49535343-8841-43f4-a8d4-ecbe34729bb3   (Notify)

• Kiiroo Onyx 2 (same v2 protocol as Launch; UUIDs vary by model/firmware)
  - Notes: Uses a single data/write characteristic + sensor notify + command/firmware control.
  - Always enumerate your unit’s GATT to confirm.

Movement command format (Kiiroo v2 / Launch)
--------------------------------------------
Two-byte packets after initialization:
    YY ZZ
Where:
    YY = position (0..99), bottom to top of stroke
    ZZ = speed   (0..99), 0=stop/slowest .. 99=fastest
Invalid values are ignored by firmware.

Initialization (entering application/user mode)
-----------------------------------------------
On connection, some units expect a one-byte 0x00 write to the Command/Bootloader characteristic to switch into normal user mode before movement commands are accepted.

Status / buttons (if available)
-------------------------------
Notifications (for applicable models) arrive as multiple sensor channels (capacitive pads). Treat values with thresholding and debounce.

Bootloader & firmware control (shared Kiiroo bootloader)
--------------------------------------------------------
There are three roles: CTL (control), DATA, SENSOR. Typical flow:
  1) Write command index to CTL
  2) Write/Read data via DATA
  3) Read CTL for status (e.g., 0x02 = success)
Common commands: Get/Set Execution Mode, Get Software Version, DFU block ops (Erase/Write/CRC).

Practical BLE notes
-------------------
• Names can appear as “Launch”, “Keon”, etc. Don’t rely on name; enumerate services.
• Timing: 10–50 Hz is typical; avoid flooding. Coalesce updates or send on change.
• Always enable notifications for status before sending motion, if you need button reads.
• Battery (0x180F) and Device Info (0x180A) standard services may or may not be present.
• GATT UUIDs may differ per FW; use a scanner (nRF Connect/LightBlue) to confirm on your device.

Buttplug / Intiface Route
=========================
What you get
------------
• Device abstraction: Keon shows up as a “Linear Actuator (Positional)” with count=1.
• Messages: Linear/Position commands (and PositionWithDuration) + optional battery/RSSI inputs.
• Multi-language client SDKs: JS/TS, C#, Rust, Go, Python (community), etc.
• Intiface Central handles discovery, pairing quirks, power management, and BLE details.

Typical workflow
----------------
1) Start Intiface Central (Desktop).
2) Enable Bluetooth scanning inside Intiface.
3) Put Keon in pairing/interactive mode (flashing blue light). Pair in OS if required by model.
4) Connect in Intiface; your app connects to Intiface via Websocket.
5) Send Linear/Position commands (0..1 normalized) or device-specific messages; Intiface converts to the device’s [YY,ZZ] writes.

API surfaces (examples)
-----------------------
• buttplug-js (Node/TS): connect to server → request device list → send LinearCmd/Scalar/StopDevice messages to the Keon.
• buttplug-csharp: same pattern for .NET.
• go-buttplug: includes FleshlightLaunchFW12Cmd helper for direct speed/position messages.
• T-Code: textual control format used by some apps; channels map to device axes (L0 for linear).

Pairing quirks & troubleshooting
--------------------------------
• Some Kiiroo devices require pairing in the OS first, then a power-cycle, then connection via Intiface.
• If Intiface shows “Configuration Error” for Keon, verify that Kiiroo brand is enabled in the Devices tab and that the device is not still paired to another app/phone.
• Holding power 15 seconds usually resets pairing (rapid LED flash). Then re-pair.

ESP32 / NimBLE sketch checklist (direct BLE)
============================================
1) Scan for service/characteristics. Prefer matching by characteristic properties (Write w/o response + Notify) and try known Kiiroo/Launch UUID patterns.
2) Connect; subscribe to the notify characteristic (optional but useful).
3) Initialization: write 0x00 to the command/bootloader characteristic (if present).
4) Movement: write 2 bytes [YY, ZZ] with 0 ≤ YY, ZZ ≤ 99 to the data/write characteristic.
5) Rate-limit: ~20–40 ms between writes is a safe starting point; only send when values change.
6) Handle disconnects/backoff. Some units sleep quickly when idle; re-init after reconnect.

Safety notes
============
• Start slow (low speed); never leave device running unattended.
• Beware of mismatched sleeves/adapters; follow mechanical load limits.
• Keep firmware updates in vendor app if needed; DFU via BLE is risky without exact images.

Reference links
===============
BLE/protocol
• Fleshlight Launch protocol (Kiiroo v2 details incl. 2-byte control): https://buttplug-spec.docs.buttplug.io/docs/stpihkal/protocols/fleshlight-launch/
• Kiiroo Onyx/Pearl 1 UUIDs (Nordic UART style): https://buttplug-spec.docs.buttplug.io/docs/stpihkal/protocols/kiiroo-onyx-pearl-1/
• Kiiroo Bootloader (shared across toys): https://buttplug-spec.docs.buttplug.io/docs/stpihkal/protocols/kiiroo-bootloader/

Intiface/Buttplug
• Intiface Central Quickstart & Bluetooth devices: https://docs.intiface.com/docs/intiface-central/quickstart/
• Bluetooth Devices help: https://docs.intiface.com/docs/intiface-central/hardware/bluetooth/
• Buttplug device info/spec & messages: https://docs.buttplug.io/documentation/
• IoSTIndex – Keon feature map: https://iostindex.com/devices/kiiroo/keon/

User manuals (pairing modes/LEDs)
• Keon manual (Feel/FeelMe site): https://feelme.com/support/manuals/keon
• Keon EN PDF manual (3rd party mirror): https://www.fetischladen.ch/PDF/english/kiiroo-keon-gebrauchsanleitung-user-manual-EN.pdf

Community code & examples
• go-buttplug (FleshlightLaunchFW12Cmd, messages): https://pkg.go.dev/github.com/diamondburned/go-buttplug

Notes
=====
• UUIDs can vary across Kiiroo models and firmware. Always enumerate your exact device.
• If you only need a stable API, use Intiface/Buttplug; it’s maintained and cross-platform.
• This file purposefully avoids vendor-closed SDKs and focuses on community-documented control paths.

— End of file —
